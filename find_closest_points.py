# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W1Ulc25xcp-JRnSUBuy00AIOQP8KYgMF
"""

import math

def haversine(lat1, lon1, lat2, lon2):
    "Calculate the distance between two points on the Earth in decimal degrees."
    # Convert decimal degrees to radians
    lat1, lon1, lat2, lon2 = map(math.radians, [lat1, lon1, lat2, lon2])

    # Haversine formula
    delta_lat = lat2 - lat1  # Difference in latitude
    delta_lon = lon2 - lon1  # Difference in longitude
    a = math.sin(delta_lat / 2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(delta_lon / 2)**2
    c = 2 * math.asin(math.sqrt(a))
    earth_radius = 6371  # Radius of Earth in kilometers
    return c * earth_radius

def find_closest_points(points1, points2):
    "Matches each point in points1 to the closest point in points2 using the Haversine formula."
    matches = []  # List to store the results

    # Loop through each point in the first list
    for p1 in points1:
        lat1, lon1 = p1  # Extract latitude and longitude of the current point in points1
        shortest_distance = float('inf')  # Initialize the shortest distance to infinity
        closest_match = None  # Initialize the closest match to None

        # Loop through each point in the second list
        for p2 in points2:
            lat2, lon2 = p2  # Extract latitude and longitude of the current point in points2
            distance = haversine(lat1, lon1, lat2, lon2)  # Calculate the distance using the Haversine formula

            # Update the closest match if a smaller distance is found
            if distance < shortest_distance:
                shortest_distance = distance
                closest_match = p2

        # Append the closest match for the current point in points1 to the results
        matches.append((p1, closest_match))

    return matches  # Return the list of closest matches

# Example
if __name__ == "__main__":
    # Define two city
    points1 = [(42.3555, -71.0565)]  # Boston
    points2 = [(38.9072, -77.0369)]  # Washington, DC
    result = find_closest_points(points1, points2)
    print("Closest Points:", result)
